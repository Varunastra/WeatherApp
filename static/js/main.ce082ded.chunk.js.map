{"version":3,"sources":["components/Header.js","components/TownInfo.js","APIrequests.js","fetchData.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","TownInfo","errorClass","error","defaultValue","city","onKeyDown","event","key","setCity","target","value","onChange","getCity","_getCity","apply","this","arguments","_callee","cityResponse","regenerator_default","wrap","_context","prev","next","localStorage","getItem","abrupt","fetch","concat","process","accept","sent","json","then","data","setItem","stop","getWeather","_x","_x2","_getWeather","_callee2","weatherService","weather","_context2","Date","now","getOpenWeather","parseOpenWeatherData","getApixuWeather","parseApixuData","JSON","stringify","callback","response","ok","_callee3","icon","weatherData","_context3","current","condition","slice","indexOf","temp","temp_c","stateText","text","_callee4","_context4","parseInt","main","description","charAt","toUpperCase","fetchData","_fetchData","service","newWeather","newCity","_args","length","undefined","getCache","storageTime","parse","removeItem","WeatherCard","setService","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","setWeatherData","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","setError","useEffect","_ref","asyncToGenerator","mark","newData","fetchCache","isFirstRun","useRef","_ref2","fetchNewData","components_Header","components_WeatherCard","objectSpread","components_TownInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce082ded.chunk.js","sourcesContent":["import React from 'react';\r\nimport './scss/Header.scss'\r\n\r\nconst Header = props => (\r\n    <header>\r\n        <h1 className=\"header__text\">Weather App</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./scss/TownInfo.scss\";\r\n\r\nfunction TownInfo(props) {\r\n  const onEnterPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      props.setCity(event.target.value);\r\n    }\r\n  };\r\n  const errorClass = props.error\r\n    ? \"town-info__error fade-in\"\r\n    : \"town-info__error\";\r\n  const onSelectChange = event => props.setCity(event.target.value);\r\n  return (\r\n    <div className=\"town-info\">\r\n      <div className={errorClass}>{props.error}</div>\r\n      <div className=\"town-info__text\">Enter town:</div>\r\n      <input\r\n        defaultValue={props.city}\r\n        className=\"town-info__input\"\r\n        onKeyDown={onEnterPress}\r\n      />\r\n      <div className=\"town-info__select-text\">Select town:</div>\r\n      <select className=\"town-info__select\" onChange={onSelectChange}>\r\n        <option>Minsk</option>\r\n        <option>Vitsyebsk</option>\r\n        <option>Mahilyow</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TownInfo;\r\n","export async function getCity() {\r\n  if (localStorage.getItem(\"city\")) return localStorage.getItem(\"city\");\r\n  const cityResponse = await fetch(\r\n    `https://api.ipdata.co/?api-key=${process.env.REACT_APP_LOCATION_API_KEY}`,\r\n    {\r\n      accept: \"application/json\"\r\n    }\r\n  );\r\n  const city = await cityResponse.json().then(data => data.city);\r\n  localStorage.setItem(\"city\", city);\r\n  return city;\r\n}\r\n\r\nexport async function getWeather(weatherService, city) {\r\n  localStorage.setItem(\"time\", Date.now());\r\n\r\n  let weather;\r\n  if (weatherService === \"OpenWeather\") {\r\n    weather = await getOpenWeather(city, parseOpenWeatherData);\r\n  } else {\r\n    weather = await getApixuWeather(city, parseApixuData);\r\n  }\r\n  if (weather) {\r\n    localStorage.setItem(\"data\", JSON.stringify(weather));\r\n    localStorage.setItem(\"city\", city);\r\n    localStorage.setItem(\"service\", weatherService);\r\n  } else {\r\n    weather = { error: weatherService + \" couldn't resolve your location\" };\r\n  }\r\n  return weather;\r\n}\r\n\r\nfunction getApixuWeather(city, callback) {\r\n  return fetch(\r\n    `https://api.apixu.com/v1/current.json?key=${\r\n      process.env.REACT_APP_APIXU_API_KEY\r\n    }&q=${city}`\r\n  ).then(response => (response.ok ? callback(response) : null));\r\n}\r\n\r\nasync function parseApixuData(response) {\r\n  const weather = await response.json().then(data => data.current);\r\n  let icon = weather.condition.icon;\r\n  icon = \"images/ApixuWeather\" + icon.slice(icon.indexOf(\"/64x64\") + 6);\r\n  const weatherData = {\r\n    temp: weather.temp_c,\r\n    stateText: weather.condition.text,\r\n    icon\r\n  };\r\n  return weatherData;\r\n}\r\n\r\nfunction getOpenWeather(city, callback) {\r\n  return fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${\r\n      process.env.REACT_APP_OPENWEATHER_API_KEY\r\n    }`,\r\n    {\r\n      accept: \"application/json\"\r\n    }\r\n  ).then(response => (response.ok ? callback(response) : null));\r\n}\r\n\r\nasync function parseOpenWeatherData(response) {\r\n  const weather = await response.json();\r\n  const weatherData = {\r\n    temp: parseInt(weather.main.temp - 273),\r\n    stateText:\r\n      weather.weather[0].description.charAt(0).toUpperCase() +\r\n      weather.weather[0].description.slice(1),\r\n    icon: \"images/OpenWeather/\" + weather.weather[0].icon + \".png\"\r\n  };\r\n  return weatherData;\r\n}\r\n","import { getCity, getWeather } from \"./APIrequests\";\r\n\r\nexport async function fetchData(city = null, service = \"OpenWeather\") {\r\n  let weather, newWeather, newCity;\r\n  if (!city) {\r\n    newCity = await getCity();\r\n  } else {\r\n    newCity = city;\r\n  }\r\n  weather = await getWeather(service, newCity);\r\n  if (!weather.error) {\r\n    localStorage.setItem(\"city\", newCity);\r\n    localStorage.setItem(\"service\", service);\r\n  }\r\n  newWeather = weather;\r\n  return newWeather;\r\n}\r\n\r\nexport function getCache() {\r\n  const cacheTime = 2 * 60 * 60;\r\n  const storageTime = localStorage.getItem(\"time\");\r\n  if (storageTime) {\r\n    const difference = (Date.now() - storageTime) / 1000;\r\n    if (difference < cacheTime) {\r\n      const weather = JSON.parse(localStorage.getItem(\"data\"));\r\n      const service = localStorage.getItem(\"service\");\r\n      return { weather, service };\r\n    } else {\r\n      localStorage.removeItem(\"time\");\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport \"./scss/WeatherCard.scss\";\r\n\r\nfunction WeatherCard(props) {\r\n  const handleChange = event => {\r\n    props.setService(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"weather-service\">\r\n        <div className=\"weather-service__text\">Weather service</div>\r\n        <select\r\n          className=\"weather-service__select\"\r\n          onChange={handleChange}\r\n          value={props.service}\r\n        >\r\n          <option value=\"OpenWeather\">OpenWeather</option>\r\n          <option value=\"ApixuWeather\">ApixuWeather</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"weather-card\">\r\n        <div className=\"weather-info\">\r\n          <div className=\"weather-state\">\r\n            <div className=\"weather-state__temp\">\r\n              &#176;{props.weatherData.temp}\r\n            </div>\r\n            <div>\r\n              <img\r\n                src={props.weatherData.icon}\r\n                className=\"weather-state__img\"\r\n                alt=\"Current Weather\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"weather-info__text\">\r\n            {props.weatherData.stateText}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport TownInfo from \"./components/TownInfo\";\r\nimport \"./App.scss\";\r\nimport { fetchData, getCache } from \"./fetchData\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\n\r\nfunction App() {\r\n\r\n  const [weatherData, setWeatherData] = useState(null);\r\n\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const [service, setService] = useState(\"OpenWeather\");\r\n\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCache = async () => {\r\n      const newData = getCache();\r\n      if (!newData) {\r\n        const weather = await fetchData();\r\n        setWeatherData(weather);\r\n      } else {\r\n        setWeatherData(newData.weather);\r\n      }\r\n      setCity(localStorage.getItem(\"city\"));\r\n      setService(localStorage.getItem(\"service\"));\r\n    };\r\n    fetchCache();\r\n  }, []);\r\n\r\n  const isFirstRun = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const fetchNewData = async () => {\r\n      if (isFirstRun.current) {\r\n        isFirstRun.current = false;\r\n        return;\r\n      }\r\n      const weather = await fetchData(city, service);\r\n      if (weather.error) {\r\n        setError(weather.error);\r\n      }\r\n      else {\r\n        setWeatherData(weather);\r\n        setError(null);\r\n      }\r\n    };\r\n    fetchNewData();\r\n  }, [city, service]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <WeatherCard\r\n        weatherData={{ ...weatherData }}\r\n        service={service}\r\n        setService={setService}\r\n      />\r\n      <TownInfo city={city} setCity={setCity} error={error} setError={setError}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}