{"version":3,"sources":["components/Header.js","components/TownInfo.js","APIrequests.js","fetchData.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","TownInfo","error","defaultValue","city","onKeyDown","event","key","setCity","target","value","onChange","getCity","_getCity","apply","this","arguments","_callee2","cityResponse","regenerator_default","wrap","_context2","prev","next","localStorage","getItem","abrupt","fetch","accept","sent","json","then","data","console","log","setItem","stop","getWeather","_x","_x2","_getWeather","_callee3","weatherService","weather","_context3","Date","now","getOpenWeather","parseOpenWeatherData","getApixuWeather","parseApixuData","JSON","stringify","callback","_ref","Object","asyncToGenerator","mark","_callee","response","_context","ok","_x3","_callee4","icon","weatherData","_context4","current","condition","slice","indexOf","temp","temp_c","stateText","text","concat","_callee5","_context5","parseInt","main","description","charAt","toUpperCase","fetchData","_fetchData","service","newWeather","newCity","_args","length","undefined","getCache","time","storageTime","parse","removeItem","WeatherCard","setService","src","alt","App","_useState","useState","_useState2","slicedToArray","setWeatherData","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","setError","useEffect","newData","fetchCache","isFirstRun","useRef","_ref2","fetchNewData","components_Header","components_WeatherCard","objectSpread","components_TownInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTASeA,SANA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,wBCsBOC,MAxBf,SAAkBL,GAQhB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZJ,EAAMM,OACTL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,eACAH,EAAAC,EAAAC,cAAA,SAAOI,aAAcP,EAAMQ,KAAMJ,UAAU,mBAAmBK,UAX7C,SAAAC,GACD,UAAdA,EAAMC,KACRX,EAAMY,QAAQF,EAAMG,OAAOC,UAU3Bb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,gBACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBW,SARnB,SAAAL,GAAK,OAAIV,EAAMY,QAAQF,EAAMG,OAAOC,QAQSA,MAAOd,EAAMQ,MAC3EP,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,mCCrBD,SAAea,IAAtB,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,IAAA,IAAAC,EAAAd,EAAA,OAAAe,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACDC,aAAaC,QAAQ,QADpB,CAAAJ,EAAAE,KAAA,eAAAF,EAAAK,OAAA,SAEIF,aAAaC,QAAQ,SAFzB,cAAAJ,EAAAE,KAAA,EAGsBI,MACzB,0FACA,CACEC,OAAQ,qBANP,cAGCV,EAHDG,EAAAQ,KAAAR,EAAAE,KAAA,EAScL,EAAaY,OAAOC,KAAK,SAAAC,GAAI,OAAIA,EAAK5B,OATpD,cASCA,EATDiB,EAAAQ,KAULI,QAAQC,IAAI9B,GACZoB,aAAaW,QAAQ,OAAQ/B,GAXxBiB,EAAAK,OAAA,SAYEtB,GAZF,yBAAAiB,EAAAe,SAAAnB,6BAeA,SAAeoB,EAAtBC,EAAAC,GAAA,OAAAC,EAAA1B,MAAAC,KAAAC,sDAAO,SAAAyB,EAA0BC,EAAgBtC,GAA1C,IAAAuC,EAAA,OAAAxB,EAAArB,EAAAsB,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,UACLC,aAAaW,QAAQ,OAAQU,KAAKC,OAGX,gBAAnBJ,EAJC,CAAAE,EAAArB,KAAA,eAAAqB,EAAArB,KAAA,EAKawB,EAAe3C,EAAM4C,GALlC,OAKHL,EALGC,EAAAf,KAAAe,EAAArB,KAAA,uBAAAqB,EAAArB,KAAA,EAOa0B,EAAgB7C,EAAM8C,GAPnC,OAOHP,EAPGC,EAAAf,KAAA,eASDc,GACFnB,aAAaW,QAAQ,OAAQgB,KAAKC,UAAUT,IAC5CnB,aAAaW,QAAQ,OAAQ/B,GAC7BoB,aAAaW,QAAQ,UAAWO,IAGhCC,EAAU,CAAEzC,MAAOwC,EAAiB,mCAfjCE,EAAAlB,OAAA,SAiBEiB,GAjBF,yBAAAC,EAAAR,SAAAK,6BAoBP,SAASQ,EAAgB7C,EAAMiD,GAC7B,OAAO1B,MACL,+EACAvB,GACA2B,KAHK,eAAAuB,EAAAC,OAAAC,EAAA,EAAAD,CAAApC,EAAArB,EAAA2D,KAGA,SAAAC,EAAMC,GAAN,OAAAxC,EAAArB,EAAAsB,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAAlC,OAAA,SAAmBiC,EAASE,GAAKR,EAASM,GAAY,MAAtD,wBAAAC,EAAAxB,SAAAsB,MAHA,gBAAAI,GAAA,OAAAR,EAAAxC,MAAAC,KAAAC,YAAA,aAMMkC,+EAAf,SAAAa,EAA8BJ,GAA9B,IAAAhB,EAAAqB,EAAAC,EAAA,OAAA9C,EAAArB,EAAAsB,KAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACwBoC,EAAS7B,OAAOC,KAAK,SAAAC,GAAI,OAAIA,EAAKmC,UAD1D,cACQxB,EADRuB,EAAArC,KAGEmC,EAAO,uBADHA,EAAOrB,EAAQyB,UAAUJ,MACOK,MAAML,EAAKM,QAAQ,UAAY,GAC7DL,EAAc,CAClBM,KAAM5B,EAAQ6B,OACdC,UAAW9B,EAAQyB,UAAUM,KAC7BV,QAPJE,EAAAxC,OAAA,SASSuC,GATT,wBAAAC,EAAA9B,SAAA2B,6BAYA,SAAShB,EAAe3C,EAAMiD,GAC5B,OAAO1B,MAAK,qDAAAgD,OAC2CvE,EAD3C,8CAEV,CACEwB,OAAQ,qBAEVG,KAAK,SAAA4B,GAAQ,OAAIA,EAASE,GAAKR,EAASM,GAAY,gBAGzCX,+EAAf,SAAA4B,EAAoCjB,GAApC,IAAAhB,EAAAsB,EAAA,OAAA9C,EAAArB,EAAAsB,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cAAAsD,EAAAtD,KAAA,EACwBoC,EAAS7B,OADjC,cACQa,EADRkC,EAAAhD,KAEQoC,EAAc,CAChBM,KAAMO,SAASnC,EAAQoC,KAAKR,KAAO,KACnCE,UACE9B,EAAQA,QAAQ,GAAGqC,YAAYC,OAAO,GAAGC,cACzCvC,EAAQA,QAAQ,GAAGqC,YAAYX,MAAM,GACvCL,KAAM,sBACJrB,EAAQA,QAAQ,GAAGqB,KAAO,QARlCa,EAAAnD,OAAA,SAUSuC,GAVT,wBAAAY,EAAAzC,SAAAwC,6BC7DO,SAAeO,IAAtB,OAAAC,EAAAtE,MAAAC,KAAAC,sDAAO,SAAA0C,IAAA,IAAAtD,EAAAiF,EAAA1C,EAAA2C,EAAAC,EAAAC,EAAAxE,UAAA,OAAAG,EAAArB,EAAAsB,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,UAAyBnB,EAAzBoF,EAAAC,OAAA,QAAAC,IAAAF,EAAA,GAAAA,EAAA,GAAgC,KAAMH,EAAtCG,EAAAC,OAAA,QAAAC,IAAAF,EAAA,GAAAA,EAAA,GAAgD,cAEhDpF,EAFA,CAAAwD,EAAArC,KAAA,eAAAqC,EAAArC,KAAA,EAGaX,IAHb,OAGH2E,EAHG3B,EAAA/B,KAAA+B,EAAArC,KAAA,eAKHgE,EAAUnF,EALP,cAAAwD,EAAArC,KAAA,GAOWc,EAAWgD,EAASE,GAP/B,eAOL5C,EAPKiB,EAAA/B,MAQQ3B,QACXsB,aAAaW,QAAQ,OAAQoD,GAC7B/D,aAAaW,QAAQ,UAAWkD,IAElCC,EAAa3C,EAZRiB,EAAAlC,OAAA,SAaE4D,GAbF,yBAAA1B,EAAAxB,SAAAsB,6BAgBA,SAASiC,IAAsB,IAAbC,EAAa5E,UAAAyE,OAAA,QAAAC,IAAA1E,UAAA,GAAAA,UAAA,GAAN,KACxB6E,EAAcrE,aAAaC,QAAQ,QACzC,GAAIoE,EAAa,CAEf,IADoBhD,KAAKC,MAAQ+C,GAAe,IAC/BD,EAGf,MAAO,CAAEjD,QAFOQ,KAAK2C,MAAMtE,aAAaC,QAAQ,SAE9B4D,QADF7D,aAAaC,QAAQ,YAGrCD,aAAauE,WAAW,QAG5B,OAAO,WCaMC,MAxCf,SAAqBpG,GAInB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,mBACAH,EAAAC,EAAAC,cAAA,UACEC,UAAU,0BACVW,SATa,SAAAL,GACnBV,EAAMqG,WAAW3F,EAAMG,OAAOC,QASxBA,MAAOd,EAAMyF,SAEbxF,EAAAC,EAAAC,cAAA,UAAQW,MAAM,eAAd,eACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAM,gBAAd,kBAGJb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,OACSJ,EAAMqE,YAAYM,MAE3B1E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEmG,IAAKtG,EAAMqE,YAAYD,KACvBhE,UAAU,qBACVmG,IAAI,sBAIVtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZJ,EAAMqE,YAAYQ,eC6BhB2B,MAzDf,WAAe,IAAAC,EAEyBC,mBAAS,MAFlCC,EAAAhD,OAAAiD,EAAA,EAAAjD,CAAA8C,EAAA,GAENpC,EAFMsC,EAAA,GAEOE,EAFPF,EAAA,GAAAG,EAIWJ,mBAAS9E,aAAaC,QAAQ,SAJzCkF,EAAApD,OAAAiD,EAAA,EAAAjD,CAAAmD,EAAA,GAINtG,EAJMuG,EAAA,GAIAnG,EAJAmG,EAAA,GAAAC,EAMiBN,mBAAS9E,aAAaC,QAAQ,YAN/CoF,EAAAtD,OAAAiD,EAAA,EAAAjD,CAAAqD,EAAA,GAMNvB,EANMwB,EAAA,GAMGZ,EANHY,EAAA,GAAAC,EAQaR,mBAAS,MARtBS,EAAAxD,OAAAiD,EAAA,EAAAjD,CAAAuD,EAAA,GAQN5G,EARM6G,EAAA,GAQCC,EARDD,EAAA,GAUbE,oBAAU,YACQ,eAAA3D,EAAAC,OAAAC,EAAA,EAAAD,CAAApC,EAAArB,EAAA2D,KAAG,SAAAC,IAAA,IAAAwD,EAAAvE,EAAA,OAAAxB,EAAArB,EAAAsB,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,UACX2F,EAAUvB,IADC,CAAA/B,EAAArC,KAAA,eAAAqC,EAAArC,KAAA,EAGO4D,IAHP,OAGTxC,EAHSiB,EAAA/B,KAIf4E,EAAe9D,GAJAiB,EAAArC,KAAA,eAMfkF,EAAeS,EAAQvE,SANR,wBAAAiB,EAAAxB,SAAAsB,MAAH,yBAAAJ,EAAAxC,MAAAC,KAAAC,YAAA,EAShBmG,IACC,IAEH,IAAMC,EAAaC,kBAAO,GAoB1B,OAlBAJ,oBAAU,YACU,eAAAK,EAAA/D,OAAAC,EAAA,EAAAD,CAAApC,EAAArB,EAAA2D,KAAG,SAAAxC,IAAA,IAAA0B,EAAA,OAAAxB,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACf6F,EAAWjD,QADI,CAAA9C,EAAAE,KAAA,eAEjB6F,EAAWjD,SAAU,EAFJ9C,EAAAK,OAAA,wBAAAL,EAAAE,KAAA,EAKG4D,EAAU/E,EAAMiF,GALnB,QAKb1C,EALatB,EAAAQ,MAMP3B,MACV8G,EAASrE,EAAQzC,QAGjBuG,EAAe9D,GACfqE,EAAS,OAXQ,wBAAA3F,EAAAe,SAAAnB,MAAH,yBAAAqG,EAAAxG,MAAAC,KAAAC,YAAA,EAclBuG,IACC,CAACnH,EAAMiF,IAGRxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyH,EAAD,MACA3H,EAAAC,EAAAC,cAAC0H,EAAD,CACExD,YAAWV,OAAAmE,EAAA,EAAAnE,CAAA,GAAOU,GAClBoB,QAASA,EACTY,WAAYA,IAEdpG,EAAAC,EAAAC,cAAC4H,EAAD,CAAUvH,KAAMA,EAAMI,QAASA,EAASN,MAAOA,MC9CjC0H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrI,EAAAC,EAAAC,cAACoI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzG,KAAK,SAAA0G,GACjCA,EAAaC","file":"static/js/main.f0bb9a2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './scss/Header.scss'\r\n\r\nconst Header = props => (\r\n    <header>\r\n        <h1 className=\"header__text\">Weather App</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./scss/TownInfo.scss\"\r\n\r\nfunction TownInfo(props) {\r\n  \r\n  const onEnterPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      props.setCity(event.target.value);\r\n    }\r\n  };\r\n  const onSelectChange = event => props.setCity(event.target.value);\r\n  return (\r\n    <div className=\"town-info\">\r\n      <div className=\"town-info__error\">\r\n        {props.error}</div>\r\n      <div className=\"town-info__text\">Enter town:</div>\r\n      <input defaultValue={props.city} className=\"town-info__input\" onKeyDown={onEnterPress}></input>\r\n      <div className=\"town-info__select-text\">Select town:</div>\r\n      <select className=\"town-info__select\" onChange={onSelectChange} value={props.city}>\r\n        <option>Minsk</option>\r\n        <option>Vitsyebsk</option>\r\n        <option>Mahilyow</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TownInfo;\r\n","export async function getCity() {\r\n  if (localStorage.getItem(\"city\"))\r\n    return localStorage.getItem(\"city\");\r\n  const cityResponse = await fetch(\r\n    \"https://api.ipdata.co/?api-key=436e0acf8733d96ec11f2b9899906075dd760ffdebccbc8acb3cd38a\",\r\n    {\r\n      accept: \"application/json\",\r\n    }\r\n  );\r\n  const city = await cityResponse.json().then(data => data.city);\r\n  console.log(city);\r\n  localStorage.setItem(\"city\", city);\r\n  return city;\r\n}\r\n\r\nexport async function getWeather(weatherService, city) {\r\n  localStorage.setItem(\"time\", Date.now());\r\n\r\n  let weather;\r\n  if (weatherService === \"OpenWeather\") {\r\n    weather = await getOpenWeather(city, parseOpenWeatherData);\r\n  } else {\r\n    weather = await getApixuWeather(city, parseApixuData);\r\n  }\r\n  if (weather) {\r\n    localStorage.setItem(\"data\", JSON.stringify(weather));\r\n    localStorage.setItem(\"city\", city);\r\n    localStorage.setItem(\"service\", weatherService);\r\n  }\r\n  else {\r\n    weather = { error: weatherService + \" couldn't resolve your location\" };\r\n  }\r\n  return weather;\r\n}\r\n\r\nfunction getApixuWeather(city, callback) {\r\n  return fetch(\r\n    \"https://api.apixu.com/v1/current.json?key=e87d9cd4f07e489c9d2130809191307&q=\" +\r\n    city\r\n  ).then(async response  => response.ok ? callback(response) : null);\r\n}\r\n\r\nasync function parseApixuData(response) {\r\n  const weather = await response.json().then(data => data.current);\r\n  let icon = weather.condition.icon;\r\n  icon = \"images/ApixuWeather\" + icon.slice(icon.indexOf(\"/64x64\") + 6);\r\n  const weatherData = {\r\n    temp: weather.temp_c,\r\n    stateText: weather.condition.text,\r\n    icon,\r\n  };\r\n  return weatherData;\r\n}\r\n\r\nfunction getOpenWeather(city, callback) {\r\n  return fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${city},by&appid=c2497fd80f1d8f3c66e7df5111b141fe`,\r\n    {\r\n      accept: \"application/json\",\r\n    }\r\n  ).then(response => response.ok ? callback(response) : null);\r\n}\r\n\r\nasync function parseOpenWeatherData(response) {\r\n  const weather = await response.json();\r\n  const weatherData = {\r\n      temp: parseInt(weather.main.temp - 273),\r\n      stateText:\r\n        weather.weather[0].description.charAt(0).toUpperCase() +\r\n        weather.weather[0].description.slice(1),\r\n      icon: \"images/OpenWeather/\" +\r\n        weather.weather[0].icon + \".png\",\r\n    };\r\n  return weatherData;\r\n}","import { getCity, getWeather } from \"./APIrequests\";\r\n\r\nexport async function fetchData(city = null, service = \"OpenWeather\") {\r\n  let weather, newWeather, newCity;\r\n  if (!city) {\r\n    newCity = await getCity();\r\n  } else {\r\n    newCity = city;\r\n  }\r\n  weather = await getWeather(service, newCity);\r\n  if (!weather.error) {\r\n    localStorage.setItem(\"city\", newCity);\r\n    localStorage.setItem(\"service\", service);\r\n  }\r\n  newWeather = weather;\r\n  return newWeather;\r\n}\r\n\r\nexport function getCache(time = 7200) {\r\n  const storageTime = localStorage.getItem(\"time\");\r\n  if (storageTime) {\r\n    const difference = (Date.now() - storageTime) / 1000;\r\n    if (difference < time) {\r\n      const weather = JSON.parse(localStorage.getItem(\"data\"));\r\n      const service = localStorage.getItem(\"service\");\r\n      return { weather, service };\r\n    } else {\r\n      localStorage.removeItem(\"time\");\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport \"./scss/WeatherCard.scss\";\r\n\r\nfunction WeatherCard(props) {\r\n  const handleChange = event => {\r\n    props.setService(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"weather-service\">\r\n        <div className=\"weather-service__text\">Weather service</div>\r\n        <select\r\n          className=\"weather-service__select\"\r\n          onChange={handleChange}\r\n          value={props.service}\r\n        >\r\n          <option value=\"OpenWeather\">OpenWeather</option>\r\n          <option value=\"ApixuWeather\">ApixuWeather</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"weather-card\">\r\n        <div className=\"weather-info\">\r\n          <div className=\"weather-state\">\r\n            <div className=\"weather-state__temp\">\r\n              &#176;{props.weatherData.temp}\r\n            </div>\r\n            <div>\r\n              <img\r\n                src={props.weatherData.icon}\r\n                className=\"weather-state__img\"\r\n                alt=\"Current Weather\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"weather-info__text\">\r\n            {props.weatherData.stateText}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport TownInfo from \"./components/TownInfo\";\r\nimport \"./App.scss\";\r\nimport { fetchData, getCache } from \"./fetchData\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\n\r\nfunction App() {\r\n\r\n  const [weatherData, setWeatherData] = useState(null);\r\n\r\n  const [city, setCity] = useState(localStorage.getItem(\"city\"));\r\n\r\n  const [service, setService] = useState(localStorage.getItem(\"service\"));\r\n\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCache = async () => {\r\n      const newData = getCache();\r\n      if (!newData) {\r\n        const weather = await fetchData();\r\n        setWeatherData(weather);\r\n      } else {\r\n        setWeatherData(newData.weather);\r\n      }\r\n    };\r\n    fetchCache();\r\n  }, []);\r\n\r\n  const isFirstRun = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const fetchNewData = async () => {\r\n      if (isFirstRun.current) {\r\n        isFirstRun.current = false;\r\n        return;\r\n      }\r\n      const weather = await fetchData(city, service);\r\n      if (weather.error) {\r\n        setError(weather.error);\r\n      }\r\n      else {\r\n        setWeatherData(weather);\r\n        setError(null);\r\n      }\r\n    };\r\n    fetchNewData();\r\n  }, [city, service]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <WeatherCard\r\n        weatherData={{ ...weatherData }}\r\n        service={service}\r\n        setService={setService}\r\n      />\r\n      <TownInfo city={city} setCity={setCity} error={error}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}