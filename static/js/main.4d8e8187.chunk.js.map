{"version":3,"sources":["components/Header.js","components/TownInfo.js","APIrequests.js","fetchData.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","TownInfo","location","localStorage","getItem","value","onChange","event","setItem","target","setServiceOrCityChanged","getCity","_getCity","apply","this","arguments","_callee","cityResponse","city","regenerator_default","wrap","_context","prev","next","abrupt","fetch","accept","sent","json","then","data","stop","getCache","time","storageTime","Date","now","weather","JSON","parse","service","removeItem","getWeather","_x","_x2","_getWeather","_callee2","weatherService","_context2","getOpenWeather","getApixuWeather","stringify","_x3","_getApixuWeather","_callee3","weatherResponse","weatherParsedData","_context3","current","temp","temp_c","stateText","condition","text","icon","_x4","_getOpenWeather","_callee4","_context4","concat","parseInt","main","description","charAt","toUpperCase","slice","fetchData","_fetchData","defaultService","newWeather","newCity","_args","length","undefined","WeatherCard","weatherInfo","weatherLoaded","weatherData","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","setWeatherData","_useState3","_useState4","setWeatherLoad","_useState5","_useState6","serviceOrCityChanged","useEffect","_ref","asyncToGenerator","mark","newData","fetchCache","isFirstRun","useRef","_ref2","fetchNewData","components_Header","components_WeatherCard","components_TownInfo","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d8e8187.chunk.js","sourcesContent":["import React from 'react';\r\nimport './scss/Header.scss'\r\n\r\nconst Header = props => (\r\n    <header>\r\n        <h1 className=\"header__text\">Weather App</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./scss/TownInfo.scss\"\r\n\r\nfunction TownInfo(props) {\r\n  const onCitySelected = event => {\r\n    localStorage.setItem(\"city\", event.target.value);\r\n    props.setServiceOrCityChanged(true);\r\n  };\r\n  const location = localStorage.getItem(\"city\") || \"not set\";\r\n  return (\r\n    <div className=\"town-info\">\r\n      <div className=\"town-info__text\">Select town</div>\r\n      <select\r\n        className=\"town-info__select\"\r\n        value={location}\r\n        onChange={onCitySelected}\r\n      >\r\n        <option value=\"Vitsyebsk\">Vitsyebsk</option>\r\n        <option value=\"Minsk\">Minsk</option>\r\n        <option value=\"Homel\">Homel</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TownInfo;\r\n","export async function getCity() {\r\n  if (localStorage.getItem(\"city\"))\r\n    return localStorage.getItem(\"city\");\r\n  const cityResponse = await fetch(\r\n    \"https://api.ipgeolocation.io/ipgeo?apiKey=d9d6e453fdf14e589797d4f615bf908b\",\r\n    {\r\n      accept: \"application/json\",\r\n    }\r\n  );\r\n  const city = await cityResponse.json().then(data => data.city);\r\n  localStorage.setItem(\"city\", city);\r\n  return city;\r\n}\r\n\r\nexport function getCache(time) {\r\n  const storageTime = localStorage.getItem(\"time\");\r\n  if (storageTime) {\r\n    const difference = (Date.now() - storageTime) / 1000;\r\n    if (difference < time) {\r\n      const weather = JSON.parse(localStorage.getItem(\"data\"));\r\n      const service = localStorage.getItem(\"service\");\r\n      return { weather, service };\r\n    } else {\r\n      localStorage.removeItem(\"time\");\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport async function getWeather(weatherService, city) {\r\n  localStorage.setItem(\"time\", Date.now());\r\n\r\n  let weather;\r\n  if (weatherService === \"OpenWeather\") {\r\n    weather = await getOpenWeather(city);\r\n  } else {\r\n    weather = await getApixuWeather(city);\r\n  }\r\n  localStorage.setItem(\"data\", JSON.stringify(weather));\r\n  localStorage.setItem(\"city\", city);\r\n  localStorage.setItem(\"service\", weatherService);\r\n  return weather;\r\n}\r\n\r\nexport async function getApixuWeather(city) {\r\n  const weatherResponse = await fetch(\r\n    \"http://api.apixu.com/v1/current.json?key=e87d9cd4f07e489c9d2130809191307&q=\" +\r\n      city\r\n  );\r\n  const weather = await weatherResponse.json().then(data => data.current);\r\n  const weatherParsedData = {\r\n    temp: weather.temp_c,\r\n    stateText: weather.condition.text,\r\n    icon: weather.condition.icon,\r\n  };\r\n  return weatherParsedData;\r\n}\r\n\r\nexport async function getOpenWeather(city) {\r\n  const weatherResponse = await fetch(\r\n    `http://api.openweathermap.org/data/2.5/weather?q=${city},by&appid=c2497fd80f1d8f3c66e7df5111b141fe`,\r\n    {\r\n      accept: \"application/json\",\r\n    }\r\n  );\r\n  const weather = await weatherResponse.json();\r\n  const weatherParsedData = {\r\n    temp: parseInt(weather.main.temp - 273),\r\n    stateText:\r\n      weather.weather[0].description.charAt(0).toUpperCase() +\r\n      weather.weather[0].description.slice(1),\r\n    icon:\r\n      \"https://openweathermap.org/img/wn/\" +\r\n      weather.weather[0].icon +\r\n      \"@2x.png\",\r\n  };\r\n  return weatherParsedData;\r\n}\r\n","import { getCity, getWeather } from \"./APIrequests\";\r\n\r\nexport async function fetchData(defaultService = \"OpenWeather\") {\r\n  let weather, newWeather, newCity, weatherService;\r\n  if (!localStorage.getItem(\"city\")) {\r\n    newCity = await getCity();\r\n    weatherService = defaultService;\r\n  } else {\r\n    newCity = localStorage.getItem(\"city\");\r\n    weatherService = localStorage.getItem(\"service\");\r\n  }\r\n  weather = await getWeather(weatherService, newCity);\r\n  newWeather = weather;\r\n  return newWeather;\r\n}\r\n","import React from \"react\";\r\nimport \"./scss/WeatherCard.scss\";\r\n\r\nfunction WeatherCard(props) {\r\n  const handleChange = event => {\r\n    localStorage.setItem(\"service\", event.target.value);\r\n    props.setServiceOrCityChanged(true);\r\n  };\r\n  const service = localStorage.getItem(\"service\") || \"not set\";\r\n  const weatherInfo = props.weatherLoaded && (\r\n    <div className=\"weather-info\">\r\n      <div className=\"weather-state\">\r\n        <div className=\"weather-state__temp\">\r\n          {\" \"}\r\n          &#176;{props.weatherData.temp}\r\n        </div>\r\n        <div>\r\n          <img\r\n            src={props.weatherData.icon}\r\n            className=\"weather-state__img\"\r\n            alt=\"Current Weather\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"weather-info__text\">{props.weatherData.stateText}</div>\r\n    </div>\r\n  );\r\n  return (\r\n    <div>\r\n      <div className=\"weather-service\">\r\n        <div className=\"weather-service__text\">Weather service</div>\r\n        <select\r\n          className=\"weather-service__select\"\r\n          onChange={handleChange}\r\n          value={service}\r\n        >\r\n          <option value=\"OpenWeather\">OpenWeather</option>\r\n          <option value=\"ApixuWeather\">ApixuWeather</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"weather-card\">{weatherInfo}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport TownInfo from \"./components/TownInfo\";\r\nimport \"./App.scss\";\r\nimport { getCache } from \"./APIrequests\";\r\nimport { fetchData } from \"./fetchData\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\n\r\nfunction App() {\r\n\r\n  const [weatherData, setWeatherData] = useState(null);\r\n\r\n  const [weatherLoaded, setWeatherLoad] = useState(false);\r\n\r\n  const [serviceOrCityChanged, setServiceOrCityChanged] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCache = async () => {\r\n      const newData = getCache(7200);\r\n      if (!newData) {\r\n        const weather = await fetchData();\r\n        setWeatherData(weather);\r\n        setWeatherLoad(true);\r\n      } else {\r\n        setWeatherData(newData.weather);\r\n        setWeatherLoad(true);\r\n        setServiceOrCityChanged(false);\r\n      }\r\n    };\r\n    fetchCache();\r\n  }, []);\r\n\r\n  const isFirstRun = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const fetchNewData = async () => {\r\n      if (isFirstRun.current) {\r\n        isFirstRun.current = false;\r\n        return;\r\n      }\r\n      const weather = await fetchData();\r\n      setWeatherData(weather);\r\n      setWeatherLoad(true);\r\n      setServiceOrCityChanged(false);\r\n    };\r\n    fetchNewData();\r\n  }, [serviceOrCityChanged]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <WeatherCard\r\n        weatherData={weatherData}\r\n        weatherLoaded={weatherLoaded}\r\n        setServiceOrCityChanged={setServiceOrCityChanged}\r\n      />\r\n      <TownInfo setServiceOrCityChanged={setServiceOrCityChanged} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}